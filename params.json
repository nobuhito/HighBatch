{"name":"Highbatch","tagline":"HighBatch is batch scheduling system.","body":"# HighBatch\r\n\r\nHighBatch is batch job scheduler sysytem.\r\n\r\nHighBatch はバッチ処理をスケジューリングするシステムです。\r\n\r\n## できる事と目指すところ\r\n\r\n- 簡単なセットアップ\r\n- シンプルな作り\r\n- サーバー毎、タスク毎に実行履歴を表示\r\n- 日時指定起動や間隔指定起動、順番を指定した起動をサポート\r\n- 正常終了以外の場合にメールで通知\r\n- 管理画面からのタスク起動\r\n- サーバーとクライアントの通信はJSONでのHTTP通信\r\n- 記録のみ用にWebhookでの登録も可能\r\n\r\n## 構成\r\n\r\nHighBatchは以下のコンポーネントからなる。\r\n\r\n- Arranger: スケジュールを管理\r\n- Walker: 実際にタスクを実行\r\n- Logger: スケジュール結果を保存\r\n- Reporter: WebUIによる履歴表示\r\n- Notifier: メール等による通知\r\n\r\n管理サーバーとタスク実行クライアントでは共にHTTPサーバーが起動しており、\r\nRESTによりタスクの実行や結果の報告が行われる。\r\n\r\n## 動作概要\r\n\r\n1. Walkerが起動すると1分毎にArrangerへデータを送りHTTP経由で生存の確認が行われる。\r\n1. Arranger生存の確認が出来たWalkerへスケジュールに合わせてHTTP経由でタスク実行を指示。\r\n1. 指示を受けたWalkerは外部コマンド起動でタスクを実行し、終了するまで定期的にArrangerへHTTP経由でデータを送信。\r\n1. 外部コマンドが終了したらWalkerはLoggerへ結果を出力。\r\n1. 結果を受け取ったLoggerはテンポラリファイルへ結果を書き込む。\r\n1. テンポラリファイルへ結果を書き込み終わったLoggerはテンポラリファイルの全てをArrangerへHTTP経由でデータ送信。\r\n1. Arrangerでタスク実行中の定期的な通信を受け取れない時は異常終了としてLoggerへ結果を出力。\r\n1. 結果を受け取ったArrangerはLoggerへ結果を出力。\r\n1. 結果を受け取ったLoggerは結果をチェックして異常終了があればメールを送信\r\n1. 結果をチェックしたLoggerはDBへ結果を保存。\r\n\r\n## 利用しているOSS\r\n\r\n- Golang\r\n- Goji\r\n- jQuery\r\n- Bootstrap\r\n- HighlightJs\r\n- TreeView\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}